// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/12/2019 21:46:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    measuring
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module measuring_vlg_sample_tst(
	clk,
	data,
	hscan_switch,
	reset,
	sampler_tx
);
input  clk;
input [9:0] data;
input  hscan_switch;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or data or hscan_switch or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module measuring_vlg_check_tst (
	freqout,
	volout,
	sampler_rx
);
input [23:0] freqout;
input [11:0] volout;
input sampler_rx;

reg [23:0] freqout_expected;
reg [11:0] volout_expected;

reg [23:0] freqout_prev;
reg [11:0] volout_prev;

reg [23:0] freqout_expected_prev;
reg [11:0] volout_expected_prev;

reg [23:0] last_freqout_exp;
reg [11:0] last_volout_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	freqout_prev = freqout;
	volout_prev = volout;
end

// update expected /o prevs

always @(trigger)
begin
	freqout_expected_prev = freqout_expected;
	volout_expected_prev = volout_expected;
end


// expected volout[ 11 ]
initial
begin
	volout_expected[11] = 1'bX;
end 
// expected volout[ 10 ]
initial
begin
	volout_expected[10] = 1'bX;
end 
// expected volout[ 9 ]
initial
begin
	volout_expected[9] = 1'bX;
end 
// expected volout[ 8 ]
initial
begin
	volout_expected[8] = 1'bX;
end 
// expected volout[ 7 ]
initial
begin
	volout_expected[7] = 1'bX;
end 
// expected volout[ 6 ]
initial
begin
	volout_expected[6] = 1'bX;
end 
// expected volout[ 5 ]
initial
begin
	volout_expected[5] = 1'bX;
end 
// expected volout[ 4 ]
initial
begin
	volout_expected[4] = 1'bX;
end 
// expected volout[ 3 ]
initial
begin
	volout_expected[3] = 1'bX;
end 
// expected volout[ 2 ]
initial
begin
	volout_expected[2] = 1'bX;
end 
// expected volout[ 1 ]
initial
begin
	volout_expected[1] = 1'bX;
end 
// expected volout[ 0 ]
initial
begin
	volout_expected[0] = 1'bX;
end 
// expected freqout[ 23 ]
initial
begin
	freqout_expected[23] = 1'bX;
end 
// expected freqout[ 22 ]
initial
begin
	freqout_expected[22] = 1'bX;
end 
// expected freqout[ 21 ]
initial
begin
	freqout_expected[21] = 1'bX;
end 
// expected freqout[ 20 ]
initial
begin
	freqout_expected[20] = 1'bX;
end 
// expected freqout[ 19 ]
initial
begin
	freqout_expected[19] = 1'bX;
end 
// expected freqout[ 18 ]
initial
begin
	freqout_expected[18] = 1'bX;
end 
// expected freqout[ 17 ]
initial
begin
	freqout_expected[17] = 1'bX;
end 
// expected freqout[ 16 ]
initial
begin
	freqout_expected[16] = 1'bX;
end 
// expected freqout[ 15 ]
initial
begin
	freqout_expected[15] = 1'bX;
end 
// expected freqout[ 14 ]
initial
begin
	freqout_expected[14] = 1'bX;
end 
// expected freqout[ 13 ]
initial
begin
	freqout_expected[13] = 1'bX;
end 
// expected freqout[ 12 ]
initial
begin
	freqout_expected[12] = 1'bX;
end 
// expected freqout[ 11 ]
initial
begin
	freqout_expected[11] = 1'bX;
end 
// expected freqout[ 10 ]
initial
begin
	freqout_expected[10] = 1'bX;
end 
// expected freqout[ 9 ]
initial
begin
	freqout_expected[9] = 1'bX;
end 
// expected freqout[ 8 ]
initial
begin
	freqout_expected[8] = 1'bX;
end 
// expected freqout[ 7 ]
initial
begin
	freqout_expected[7] = 1'bX;
end 
// expected freqout[ 6 ]
initial
begin
	freqout_expected[6] = 1'bX;
end 
// expected freqout[ 5 ]
initial
begin
	freqout_expected[5] = 1'bX;
end 
// expected freqout[ 4 ]
initial
begin
	freqout_expected[4] = 1'bX;
end 
// expected freqout[ 3 ]
initial
begin
	freqout_expected[3] = 1'bX;
end 
// expected freqout[ 2 ]
initial
begin
	freqout_expected[2] = 1'bX;
end 
// expected freqout[ 1 ]
initial
begin
	freqout_expected[1] = 1'bX;
end 
// expected freqout[ 0 ]
initial
begin
	freqout_expected[0] = 1'bX;
end 
// generate trigger
always @(freqout_expected or freqout or volout_expected or volout)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected freqout = %b | expected volout = %b | ",freqout_expected_prev,volout_expected_prev);
	$display("| real freqout = %b | real volout = %b | ",freqout_prev,volout_prev);
`endif
	if (
		( freqout_expected_prev[0] !== 1'bx ) && ( freqout_prev[0] !== freqout_expected_prev[0] )
		&& ((freqout_expected_prev[0] !== last_freqout_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freqout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freqout_expected_prev);
		$display ("     Real value = %b", freqout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_freqout_exp[0] = freqout_expected_prev[0];
	end
	if (
		( freqout_expected_prev[1] !== 1'bx ) && ( freqout_prev[1] !== freqout_expected_prev[1] )
		&& ((freqout_expected_prev[1] !== last_freqout_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freqout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freqout_expected_prev);
		$display ("     Real value = %b", freqout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_freqout_exp[1] = freqout_expected_prev[1];
	end
	if (
		( freqout_expected_prev[2] !== 1'bx ) && ( freqout_prev[2] !== freqout_expected_prev[2] )
		&& ((freqout_expected_prev[2] !== last_freqout_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freqout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freqout_expected_prev);
		$display ("     Real value = %b", freqout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_freqout_exp[2] = freqout_expected_prev[2];
	end
	if (
		( freqout_expected_prev[3] !== 1'bx ) && ( freqout_prev[3] !== freqout_expected_prev[3] )
		&& ((freqout_expected_prev[3] !== last_freqout_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freqout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freqout_expected_prev);
		$display ("     Real value = %b", freqout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_freqout_exp[3] = freqout_expected_prev[3];
	end
	if (
		( freqout_expected_prev[4] !== 1'bx ) && ( freqout_prev[4] !== freqout_expected_prev[4] )
		&& ((freqout_expected_prev[4] !== last_freqout_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freqout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freqout_expected_prev);
		$display ("     Real value = %b", freqout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_freqout_exp[4] = freqout_expected_prev[4];
	end
	if (
		( freqout_expected_prev[5] !== 1'bx ) && ( freqout_prev[5] !== freqout_expected_prev[5] )
		&& ((freqout_expected_prev[5] !== last_freqout_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freqout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freqout_expected_prev);
		$display ("     Real value = %b", freqout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_freqout_exp[5] = freqout_expected_prev[5];
	end
	if (
		( freqout_expected_prev[6] !== 1'bx ) && ( freqout_prev[6] !== freqout_expected_prev[6] )
		&& ((freqout_expected_prev[6] !== last_freqout_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freqout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freqout_expected_prev);
		$display ("     Real value = %b", freqout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_freqout_exp[6] = freqout_expected_prev[6];
	end
	if (
		( freqout_expected_prev[7] !== 1'bx ) && ( freqout_prev[7] !== freqout_expected_prev[7] )
		&& ((freqout_expected_prev[7] !== last_freqout_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freqout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freqout_expected_prev);
		$display ("     Real value = %b", freqout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_freqout_exp[7] = freqout_expected_prev[7];
	end
	if (
		( freqout_expected_prev[8] !== 1'bx ) && ( freqout_prev[8] !== freqout_expected_prev[8] )
		&& ((freqout_expected_prev[8] !== last_freqout_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freqout[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freqout_expected_prev);
		$display ("     Real value = %b", freqout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_freqout_exp[8] = freqout_expected_prev[8];
	end
	if (
		( freqout_expected_prev[9] !== 1'bx ) && ( freqout_prev[9] !== freqout_expected_prev[9] )
		&& ((freqout_expected_prev[9] !== last_freqout_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freqout[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freqout_expected_prev);
		$display ("     Real value = %b", freqout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_freqout_exp[9] = freqout_expected_prev[9];
	end
	if (
		( freqout_expected_prev[10] !== 1'bx ) && ( freqout_prev[10] !== freqout_expected_prev[10] )
		&& ((freqout_expected_prev[10] !== last_freqout_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freqout[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freqout_expected_prev);
		$display ("     Real value = %b", freqout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_freqout_exp[10] = freqout_expected_prev[10];
	end
	if (
		( freqout_expected_prev[11] !== 1'bx ) && ( freqout_prev[11] !== freqout_expected_prev[11] )
		&& ((freqout_expected_prev[11] !== last_freqout_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freqout[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freqout_expected_prev);
		$display ("     Real value = %b", freqout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_freqout_exp[11] = freqout_expected_prev[11];
	end
	if (
		( freqout_expected_prev[12] !== 1'bx ) && ( freqout_prev[12] !== freqout_expected_prev[12] )
		&& ((freqout_expected_prev[12] !== last_freqout_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freqout[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freqout_expected_prev);
		$display ("     Real value = %b", freqout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_freqout_exp[12] = freqout_expected_prev[12];
	end
	if (
		( freqout_expected_prev[13] !== 1'bx ) && ( freqout_prev[13] !== freqout_expected_prev[13] )
		&& ((freqout_expected_prev[13] !== last_freqout_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freqout[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freqout_expected_prev);
		$display ("     Real value = %b", freqout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_freqout_exp[13] = freqout_expected_prev[13];
	end
	if (
		( freqout_expected_prev[14] !== 1'bx ) && ( freqout_prev[14] !== freqout_expected_prev[14] )
		&& ((freqout_expected_prev[14] !== last_freqout_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freqout[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freqout_expected_prev);
		$display ("     Real value = %b", freqout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_freqout_exp[14] = freqout_expected_prev[14];
	end
	if (
		( freqout_expected_prev[15] !== 1'bx ) && ( freqout_prev[15] !== freqout_expected_prev[15] )
		&& ((freqout_expected_prev[15] !== last_freqout_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freqout[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freqout_expected_prev);
		$display ("     Real value = %b", freqout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_freqout_exp[15] = freqout_expected_prev[15];
	end
	if (
		( freqout_expected_prev[16] !== 1'bx ) && ( freqout_prev[16] !== freqout_expected_prev[16] )
		&& ((freqout_expected_prev[16] !== last_freqout_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freqout[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freqout_expected_prev);
		$display ("     Real value = %b", freqout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_freqout_exp[16] = freqout_expected_prev[16];
	end
	if (
		( freqout_expected_prev[17] !== 1'bx ) && ( freqout_prev[17] !== freqout_expected_prev[17] )
		&& ((freqout_expected_prev[17] !== last_freqout_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freqout[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freqout_expected_prev);
		$display ("     Real value = %b", freqout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_freqout_exp[17] = freqout_expected_prev[17];
	end
	if (
		( freqout_expected_prev[18] !== 1'bx ) && ( freqout_prev[18] !== freqout_expected_prev[18] )
		&& ((freqout_expected_prev[18] !== last_freqout_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freqout[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freqout_expected_prev);
		$display ("     Real value = %b", freqout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_freqout_exp[18] = freqout_expected_prev[18];
	end
	if (
		( freqout_expected_prev[19] !== 1'bx ) && ( freqout_prev[19] !== freqout_expected_prev[19] )
		&& ((freqout_expected_prev[19] !== last_freqout_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freqout[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freqout_expected_prev);
		$display ("     Real value = %b", freqout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_freqout_exp[19] = freqout_expected_prev[19];
	end
	if (
		( freqout_expected_prev[20] !== 1'bx ) && ( freqout_prev[20] !== freqout_expected_prev[20] )
		&& ((freqout_expected_prev[20] !== last_freqout_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freqout[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freqout_expected_prev);
		$display ("     Real value = %b", freqout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_freqout_exp[20] = freqout_expected_prev[20];
	end
	if (
		( freqout_expected_prev[21] !== 1'bx ) && ( freqout_prev[21] !== freqout_expected_prev[21] )
		&& ((freqout_expected_prev[21] !== last_freqout_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freqout[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freqout_expected_prev);
		$display ("     Real value = %b", freqout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_freqout_exp[21] = freqout_expected_prev[21];
	end
	if (
		( freqout_expected_prev[22] !== 1'bx ) && ( freqout_prev[22] !== freqout_expected_prev[22] )
		&& ((freqout_expected_prev[22] !== last_freqout_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freqout[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freqout_expected_prev);
		$display ("     Real value = %b", freqout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_freqout_exp[22] = freqout_expected_prev[22];
	end
	if (
		( freqout_expected_prev[23] !== 1'bx ) && ( freqout_prev[23] !== freqout_expected_prev[23] )
		&& ((freqout_expected_prev[23] !== last_freqout_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freqout[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freqout_expected_prev);
		$display ("     Real value = %b", freqout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_freqout_exp[23] = freqout_expected_prev[23];
	end
	if (
		( volout_expected_prev[0] !== 1'bx ) && ( volout_prev[0] !== volout_expected_prev[0] )
		&& ((volout_expected_prev[0] !== last_volout_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port volout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", volout_expected_prev);
		$display ("     Real value = %b", volout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_volout_exp[0] = volout_expected_prev[0];
	end
	if (
		( volout_expected_prev[1] !== 1'bx ) && ( volout_prev[1] !== volout_expected_prev[1] )
		&& ((volout_expected_prev[1] !== last_volout_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port volout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", volout_expected_prev);
		$display ("     Real value = %b", volout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_volout_exp[1] = volout_expected_prev[1];
	end
	if (
		( volout_expected_prev[2] !== 1'bx ) && ( volout_prev[2] !== volout_expected_prev[2] )
		&& ((volout_expected_prev[2] !== last_volout_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port volout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", volout_expected_prev);
		$display ("     Real value = %b", volout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_volout_exp[2] = volout_expected_prev[2];
	end
	if (
		( volout_expected_prev[3] !== 1'bx ) && ( volout_prev[3] !== volout_expected_prev[3] )
		&& ((volout_expected_prev[3] !== last_volout_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port volout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", volout_expected_prev);
		$display ("     Real value = %b", volout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_volout_exp[3] = volout_expected_prev[3];
	end
	if (
		( volout_expected_prev[4] !== 1'bx ) && ( volout_prev[4] !== volout_expected_prev[4] )
		&& ((volout_expected_prev[4] !== last_volout_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port volout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", volout_expected_prev);
		$display ("     Real value = %b", volout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_volout_exp[4] = volout_expected_prev[4];
	end
	if (
		( volout_expected_prev[5] !== 1'bx ) && ( volout_prev[5] !== volout_expected_prev[5] )
		&& ((volout_expected_prev[5] !== last_volout_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port volout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", volout_expected_prev);
		$display ("     Real value = %b", volout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_volout_exp[5] = volout_expected_prev[5];
	end
	if (
		( volout_expected_prev[6] !== 1'bx ) && ( volout_prev[6] !== volout_expected_prev[6] )
		&& ((volout_expected_prev[6] !== last_volout_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port volout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", volout_expected_prev);
		$display ("     Real value = %b", volout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_volout_exp[6] = volout_expected_prev[6];
	end
	if (
		( volout_expected_prev[7] !== 1'bx ) && ( volout_prev[7] !== volout_expected_prev[7] )
		&& ((volout_expected_prev[7] !== last_volout_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port volout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", volout_expected_prev);
		$display ("     Real value = %b", volout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_volout_exp[7] = volout_expected_prev[7];
	end
	if (
		( volout_expected_prev[8] !== 1'bx ) && ( volout_prev[8] !== volout_expected_prev[8] )
		&& ((volout_expected_prev[8] !== last_volout_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port volout[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", volout_expected_prev);
		$display ("     Real value = %b", volout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_volout_exp[8] = volout_expected_prev[8];
	end
	if (
		( volout_expected_prev[9] !== 1'bx ) && ( volout_prev[9] !== volout_expected_prev[9] )
		&& ((volout_expected_prev[9] !== last_volout_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port volout[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", volout_expected_prev);
		$display ("     Real value = %b", volout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_volout_exp[9] = volout_expected_prev[9];
	end
	if (
		( volout_expected_prev[10] !== 1'bx ) && ( volout_prev[10] !== volout_expected_prev[10] )
		&& ((volout_expected_prev[10] !== last_volout_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port volout[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", volout_expected_prev);
		$display ("     Real value = %b", volout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_volout_exp[10] = volout_expected_prev[10];
	end
	if (
		( volout_expected_prev[11] !== 1'bx ) && ( volout_prev[11] !== volout_expected_prev[11] )
		&& ((volout_expected_prev[11] !== last_volout_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port volout[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", volout_expected_prev);
		$display ("     Real value = %b", volout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_volout_exp[11] = volout_expected_prev[11];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module measuring_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [9:0] data;
reg hscan_switch;
reg reset;
// wires                                               
wire [23:0] freqout;
wire [11:0] volout;

wire sampler;                             

// assign statements (if any)                          
measuring i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.data(data),
	.freqout(freqout),
	.hscan_switch(hscan_switch),
	.reset(reset),
	.volout(volout)
);

// hscan_switch
initial
begin
	hscan_switch = 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #2500 1'b1;
	#2500;
end 
// data[ 9 ]
initial
begin
	data[9] = 1'b1;
	data[9] = #5000 1'b0;
	data[9] = #15000 1'b1;
	data[9] = #15000 1'b0;
	data[9] = #10000 1'b1;
	data[9] = #10000 1'b0;
	data[9] = #10000 1'b1;
	data[9] = #5000 1'b0;
	data[9] = #5000 1'b1;
	data[9] = #10000 1'b0;
	data[9] = #5000 1'b1;
	data[9] = #15000 1'b0;
	data[9] = #10000 1'b1;
	data[9] = #5000 1'b0;
	data[9] = #10000 1'b1;
	data[9] = #10000 1'b0;
	data[9] = #20000 1'b1;
	data[9] = #5000 1'b0;
	data[9] = #30000 1'b1;
	data[9] = #15000 1'b0;
	data[9] = #5000 1'b1;
	data[9] = #10000 1'b0;
	data[9] = #5000 1'b1;
	data[9] = #5000 1'b0;
	data[9] = #10000 1'b1;
	data[9] = #5000 1'b0;
	data[9] = #5000 1'b1;
	data[9] = #10000 1'b0;
	data[9] = #5000 1'b1;
	data[9] = #20000 1'b0;
	data[9] = #5000 1'b1;
	data[9] = #5000 1'b0;
	data[9] = #15000 1'b1;
	data[9] = #15000 1'b0;
	data[9] = #5000 1'b1;
	data[9] = #10000 1'b0;
	data[9] = #5000 1'b1;
	data[9] = #5000 1'b0;
	data[9] = #20000 1'b1;
	data[9] = #10000 1'b0;
	data[9] = #5000 1'b1;
	data[9] = #20000 1'b0;
	data[9] = #5000 1'b1;
	data[9] = #5000 1'b0;
	data[9] = #25000 1'b1;
	data[9] = #5000 1'b0;
	data[9] = #5000 1'b1;
	data[9] = #15000 1'b0;
	data[9] = #15000 1'b1;
	data[9] = #15000 1'b0;
	data[9] = #5000 1'b1;
	data[9] = #10000 1'b0;
	data[9] = #5000 1'b1;
	data[9] = #5000 1'b0;
	data[9] = #30000 1'b1;
	data[9] = #15000 1'b0;
	data[9] = #5000 1'b1;
	data[9] = #5000 1'b0;
	data[9] = #20000 1'b1;
	data[9] = #5000 1'b0;
	data[9] = #5000 1'b1;
	data[9] = #5000 1'b0;
	data[9] = #20000 1'b1;
	data[9] = #5000 1'b0;
	data[9] = #25000 1'b1;
	data[9] = #15000 1'b0;
	data[9] = #5000 1'b1;
	data[9] = #15000 1'b0;
	data[9] = #25000 1'b1;
	data[9] = #5000 1'b0;
	data[9] = #5000 1'b1;
	data[9] = #20000 1'b0;
	data[9] = #10000 1'b1;
	data[9] = #5000 1'b0;
	data[9] = #10000 1'b1;
	data[9] = #15000 1'b0;
	data[9] = #10000 1'b1;
	data[9] = #5000 1'b0;
	data[9] = #15000 1'b1;
	data[9] = #5000 1'b0;
	data[9] = #5000 1'b1;
	data[9] = #10000 1'b0;
	data[9] = #10000 1'b1;
	data[9] = #15000 1'b0;
	data[9] = #10000 1'b1;
	data[9] = #10000 1'b0;
	data[9] = #15000 1'b1;
	data[9] = #5000 1'b0;
	data[9] = #5000 1'b1;
	data[9] = #5000 1'b0;
	data[9] = #15000 1'b1;
	data[9] = #10000 1'b0;
	data[9] = #20000 1'b1;
	data[9] = #15000 1'b0;
	data[9] = #10000 1'b1;
end 
// data[ 8 ]
initial
begin
	data[8] = 1'b0;
	data[8] = #5000 1'b1;
	data[8] = #5000 1'b0;
	data[8] = #40000 1'b1;
	data[8] = #25000 1'b0;
	data[8] = #5000 1'b1;
	data[8] = #10000 1'b0;
	data[8] = #5000 1'b1;
	data[8] = #10000 1'b0;
	data[8] = #35000 1'b1;
	data[8] = #5000 1'b0;
	data[8] = #30000 1'b1;
	data[8] = #30000 1'b0;
	data[8] = #15000 1'b1;
	data[8] = #20000 1'b0;
	data[8] = #10000 1'b1;
	data[8] = #20000 1'b0;
	data[8] = #30000 1'b1;
	data[8] = #10000 1'b0;
	data[8] = #5000 1'b1;
	data[8] = #10000 1'b0;
	data[8] = #5000 1'b1;
	data[8] = #5000 1'b0;
	data[8] = #5000 1'b1;
	data[8] = #5000 1'b0;
	data[8] = #5000 1'b1;
	data[8] = #5000 1'b0;
	data[8] = #10000 1'b1;
	data[8] = #10000 1'b0;
	data[8] = #5000 1'b1;
	data[8] = #15000 1'b0;
	data[8] = #30000 1'b1;
	data[8] = #5000 1'b0;
	data[8] = #5000 1'b1;
	data[8] = #5000 1'b0;
	data[8] = #25000 1'b1;
	data[8] = #10000 1'b0;
	data[8] = #15000 1'b1;
	data[8] = #5000 1'b0;
	data[8] = #5000 1'b1;
	data[8] = #5000 1'b0;
	data[8] = #15000 1'b1;
	data[8] = #5000 1'b0;
	data[8] = #15000 1'b1;
	data[8] = #5000 1'b0;
	data[8] = #10000 1'b1;
	data[8] = #10000 1'b0;
	data[8] = #10000 1'b1;
	data[8] = #5000 1'b0;
	data[8] = #5000 1'b1;
	data[8] = #10000 1'b0;
	data[8] = #5000 1'b1;
	data[8] = #5000 1'b0;
	data[8] = #5000 1'b1;
	data[8] = #5000 1'b0;
	data[8] = #10000 1'b1;
	data[8] = #15000 1'b0;
	data[8] = #10000 1'b1;
	data[8] = #5000 1'b0;
	data[8] = #5000 1'b1;
	data[8] = #30000 1'b0;
	data[8] = #10000 1'b1;
	data[8] = #5000 1'b0;
	data[8] = #5000 1'b1;
	data[8] = #10000 1'b0;
	data[8] = #20000 1'b1;
	data[8] = #5000 1'b0;
	data[8] = #5000 1'b1;
	data[8] = #15000 1'b0;
	data[8] = #15000 1'b1;
	data[8] = #5000 1'b0;
	data[8] = #5000 1'b1;
	data[8] = #5000 1'b0;
	data[8] = #5000 1'b1;
	data[8] = #5000 1'b0;
	data[8] = #15000 1'b1;
	data[8] = #20000 1'b0;
	data[8] = #5000 1'b1;
	data[8] = #20000 1'b0;
	data[8] = #10000 1'b1;
	data[8] = #5000 1'b0;
	data[8] = #10000 1'b1;
	data[8] = #40000 1'b0;
	data[8] = #5000 1'b1;
	data[8] = #10000 1'b0;
	data[8] = #10000 1'b1;
	data[8] = #10000 1'b0;
	data[8] = #5000 1'b1;
	data[8] = #10000 1'b0;
	data[8] = #5000 1'b1;
	data[8] = #5000 1'b0;
	data[8] = #5000 1'b1;
end 
// data[ 7 ]
initial
begin
	data[7] = 1'b1;
	data[7] = #5000 1'b0;
	data[7] = #15000 1'b1;
	data[7] = #5000 1'b0;
	data[7] = #25000 1'b1;
	data[7] = #25000 1'b0;
	data[7] = #10000 1'b1;
	data[7] = #5000 1'b0;
	data[7] = #15000 1'b1;
	data[7] = #5000 1'b0;
	data[7] = #10000 1'b1;
	data[7] = #5000 1'b0;
	data[7] = #5000 1'b1;
	data[7] = #5000 1'b0;
	data[7] = #5000 1'b1;
	data[7] = #5000 1'b0;
	data[7] = #15000 1'b1;
	data[7] = #5000 1'b0;
	data[7] = #10000 1'b1;
	data[7] = #5000 1'b0;
	data[7] = #15000 1'b1;
	data[7] = #35000 1'b0;
	data[7] = #5000 1'b1;
	data[7] = #5000 1'b0;
	data[7] = #10000 1'b1;
	data[7] = #5000 1'b0;
	data[7] = #10000 1'b1;
	data[7] = #10000 1'b0;
	data[7] = #10000 1'b1;
	data[7] = #5000 1'b0;
	data[7] = #5000 1'b1;
	data[7] = #5000 1'b0;
	data[7] = #5000 1'b1;
	data[7] = #5000 1'b0;
	data[7] = #25000 1'b1;
	data[7] = #20000 1'b0;
	data[7] = #5000 1'b1;
	data[7] = #5000 1'b0;
	data[7] = #25000 1'b1;
	data[7] = #10000 1'b0;
	data[7] = #5000 1'b1;
	data[7] = #15000 1'b0;
	data[7] = #30000 1'b1;
	data[7] = #5000 1'b0;
	data[7] = #35000 1'b1;
	data[7] = #10000 1'b0;
	data[7] = #5000 1'b1;
	data[7] = #30000 1'b0;
	data[7] = #5000 1'b1;
	data[7] = #15000 1'b0;
	data[7] = #5000 1'b1;
	data[7] = #20000 1'b0;
	data[7] = #5000 1'b1;
	data[7] = #5000 1'b0;
	data[7] = #5000 1'b1;
	data[7] = #5000 1'b0;
	data[7] = #5000 1'b1;
	data[7] = #5000 1'b0;
	data[7] = #10000 1'b1;
	data[7] = #25000 1'b0;
	data[7] = #10000 1'b1;
	data[7] = #5000 1'b0;
	data[7] = #20000 1'b1;
	data[7] = #5000 1'b0;
	data[7] = #5000 1'b1;
	data[7] = #10000 1'b0;
	data[7] = #5000 1'b1;
	data[7] = #15000 1'b0;
	data[7] = #25000 1'b1;
	data[7] = #15000 1'b0;
	data[7] = #20000 1'b1;
	data[7] = #5000 1'b0;
	data[7] = #10000 1'b1;
	data[7] = #15000 1'b0;
	data[7] = #5000 1'b1;
	data[7] = #15000 1'b0;
	data[7] = #5000 1'b1;
	data[7] = #25000 1'b0;
	data[7] = #10000 1'b1;
	data[7] = #10000 1'b0;
	data[7] = #10000 1'b1;
	data[7] = #5000 1'b0;
	data[7] = #20000 1'b1;
	data[7] = #5000 1'b0;
	data[7] = #5000 1'b1;
	data[7] = #15000 1'b0;
	data[7] = #5000 1'b1;
	data[7] = #5000 1'b0;
	data[7] = #5000 1'b1;
	data[7] = #20000 1'b0;
	data[7] = #5000 1'b1;
	data[7] = #5000 1'b0;
	data[7] = #5000 1'b1;
end 
// data[ 6 ]
initial
begin
	data[6] = 1'b1;
	data[6] = #5000 1'b0;
	data[6] = #35000 1'b1;
	data[6] = #20000 1'b0;
	data[6] = #10000 1'b1;
	data[6] = #10000 1'b0;
	data[6] = #5000 1'b1;
	data[6] = #5000 1'b0;
	data[6] = #30000 1'b1;
	data[6] = #5000 1'b0;
	data[6] = #10000 1'b1;
	data[6] = #5000 1'b0;
	data[6] = #5000 1'b1;
	data[6] = #5000 1'b0;
	data[6] = #5000 1'b1;
	data[6] = #10000 1'b0;
	data[6] = #15000 1'b1;
	data[6] = #20000 1'b0;
	data[6] = #5000 1'b1;
	data[6] = #15000 1'b0;
	data[6] = #25000 1'b1;
	data[6] = #5000 1'b0;
	data[6] = #5000 1'b1;
	data[6] = #20000 1'b0;
	data[6] = #10000 1'b1;
	data[6] = #5000 1'b0;
	data[6] = #5000 1'b1;
	data[6] = #30000 1'b0;
	data[6] = #10000 1'b1;
	data[6] = #5000 1'b0;
	data[6] = #10000 1'b1;
	data[6] = #5000 1'b0;
	data[6] = #5000 1'b1;
	data[6] = #10000 1'b0;
	data[6] = #20000 1'b1;
	data[6] = #10000 1'b0;
	data[6] = #5000 1'b1;
	data[6] = #5000 1'b0;
	data[6] = #10000 1'b1;
	data[6] = #5000 1'b0;
	data[6] = #10000 1'b1;
	data[6] = #5000 1'b0;
	data[6] = #5000 1'b1;
	data[6] = #5000 1'b0;
	data[6] = #5000 1'b1;
	data[6] = #5000 1'b0;
	data[6] = #10000 1'b1;
	data[6] = #15000 1'b0;
	data[6] = #10000 1'b1;
	data[6] = #10000 1'b0;
	data[6] = #5000 1'b1;
	data[6] = #5000 1'b0;
	data[6] = #25000 1'b1;
	data[6] = #5000 1'b0;
	data[6] = #20000 1'b1;
	data[6] = #10000 1'b0;
	data[6] = #5000 1'b1;
	data[6] = #15000 1'b0;
	data[6] = #15000 1'b1;
	data[6] = #10000 1'b0;
	data[6] = #5000 1'b1;
	data[6] = #20000 1'b0;
	data[6] = #15000 1'b1;
	data[6] = #10000 1'b0;
	data[6] = #10000 1'b1;
	data[6] = #5000 1'b0;
	data[6] = #15000 1'b1;
	data[6] = #10000 1'b0;
	data[6] = #10000 1'b1;
	data[6] = #15000 1'b0;
	data[6] = #5000 1'b1;
	data[6] = #15000 1'b0;
	data[6] = #20000 1'b1;
	data[6] = #10000 1'b0;
	data[6] = #20000 1'b1;
	data[6] = #15000 1'b0;
	data[6] = #5000 1'b1;
	data[6] = #10000 1'b0;
	data[6] = #10000 1'b1;
	data[6] = #15000 1'b0;
	data[6] = #5000 1'b1;
	data[6] = #20000 1'b0;
	data[6] = #5000 1'b1;
	data[6] = #5000 1'b0;
	data[6] = #10000 1'b1;
	data[6] = #10000 1'b0;
	data[6] = #10000 1'b1;
	data[6] = #5000 1'b0;
	data[6] = #15000 1'b1;
	data[6] = #10000 1'b0;
	data[6] = #10000 1'b1;
	data[6] = #5000 1'b0;
	data[6] = #5000 1'b1;
	data[6] = #5000 1'b0;
	data[6] = #10000 1'b1;
end 
// data[ 5 ]
initial
begin
	data[5] = 1'b1;
	data[5] = #5000 1'b0;
	data[5] = #20000 1'b1;
	data[5] = #5000 1'b0;
	data[5] = #10000 1'b1;
	data[5] = #5000 1'b0;
	data[5] = #5000 1'b1;
	data[5] = #15000 1'b0;
	data[5] = #10000 1'b1;
	data[5] = #45000 1'b0;
	data[5] = #10000 1'b1;
	data[5] = #15000 1'b0;
	data[5] = #5000 1'b1;
	data[5] = #10000 1'b0;
	data[5] = #5000 1'b1;
	data[5] = #5000 1'b0;
	data[5] = #5000 1'b1;
	data[5] = #15000 1'b0;
	data[5] = #15000 1'b1;
	data[5] = #5000 1'b0;
	data[5] = #20000 1'b1;
	data[5] = #15000 1'b0;
	data[5] = #25000 1'b1;
	data[5] = #5000 1'b0;
	data[5] = #5000 1'b1;
	data[5] = #10000 1'b0;
	data[5] = #5000 1'b1;
	data[5] = #10000 1'b0;
	data[5] = #5000 1'b1;
	data[5] = #15000 1'b0;
	data[5] = #15000 1'b1;
	data[5] = #20000 1'b0;
	data[5] = #15000 1'b1;
	data[5] = #20000 1'b0;
	data[5] = #5000 1'b1;
	data[5] = #5000 1'b0;
	data[5] = #5000 1'b1;
	data[5] = #5000 1'b0;
	data[5] = #10000 1'b1;
	data[5] = #5000 1'b0;
	data[5] = #10000 1'b1;
	data[5] = #5000 1'b0;
	data[5] = #10000 1'b1;
	data[5] = #5000 1'b0;
	data[5] = #5000 1'b1;
	data[5] = #5000 1'b0;
	data[5] = #10000 1'b1;
	data[5] = #5000 1'b0;
	data[5] = #5000 1'b1;
	data[5] = #5000 1'b0;
	data[5] = #15000 1'b1;
	data[5] = #5000 1'b0;
	data[5] = #5000 1'b1;
	data[5] = #5000 1'b0;
	data[5] = #10000 1'b1;
	data[5] = #10000 1'b0;
	data[5] = #5000 1'b1;
	data[5] = #20000 1'b0;
	data[5] = #20000 1'b1;
	data[5] = #10000 1'b0;
	data[5] = #10000 1'b1;
	data[5] = #5000 1'b0;
	data[5] = #10000 1'b1;
	data[5] = #15000 1'b0;
	data[5] = #5000 1'b1;
	data[5] = #5000 1'b0;
	data[5] = #35000 1'b1;
	data[5] = #20000 1'b0;
	data[5] = #5000 1'b1;
	data[5] = #10000 1'b0;
	data[5] = #5000 1'b1;
	data[5] = #5000 1'b0;
	data[5] = #15000 1'b1;
	data[5] = #5000 1'b0;
	data[5] = #10000 1'b1;
	data[5] = #10000 1'b0;
	data[5] = #5000 1'b1;
	data[5] = #10000 1'b0;
	data[5] = #5000 1'b1;
	data[5] = #5000 1'b0;
	data[5] = #10000 1'b1;
	data[5] = #5000 1'b0;
	data[5] = #5000 1'b1;
	data[5] = #15000 1'b0;
	data[5] = #5000 1'b1;
	data[5] = #5000 1'b0;
	data[5] = #5000 1'b1;
	data[5] = #20000 1'b0;
	data[5] = #35000 1'b1;
	data[5] = #10000 1'b0;
	data[5] = #5000 1'b1;
	data[5] = #20000 1'b0;
	data[5] = #10000 1'b1;
	data[5] = #30000 1'b0;
end 
// data[ 4 ]
initial
begin
	data[4] = 1'b1;
	data[4] = #15000 1'b0;
	data[4] = #10000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #5000 1'b1;
	data[4] = #30000 1'b0;
	data[4] = #10000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #5000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #10000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #15000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #10000 1'b1;
	data[4] = #10000 1'b0;
	data[4] = #20000 1'b1;
	data[4] = #15000 1'b0;
	data[4] = #15000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #5000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #20000 1'b1;
	data[4] = #25000 1'b0;
	data[4] = #10000 1'b1;
	data[4] = #15000 1'b0;
	data[4] = #20000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #5000 1'b1;
	data[4] = #20000 1'b0;
	data[4] = #10000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #25000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #10000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #5000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #5000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #10000 1'b1;
	data[4] = #10000 1'b0;
	data[4] = #15000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #10000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #5000 1'b1;
	data[4] = #10000 1'b0;
	data[4] = #5000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #5000 1'b1;
	data[4] = #10000 1'b0;
	data[4] = #5000 1'b1;
	data[4] = #15000 1'b0;
	data[4] = #15000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #5000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #5000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #10000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #25000 1'b1;
	data[4] = #10000 1'b0;
	data[4] = #20000 1'b1;
	data[4] = #10000 1'b0;
	data[4] = #10000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #5000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #5000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #10000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #5000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #5000 1'b1;
	data[4] = #10000 1'b0;
	data[4] = #20000 1'b1;
	data[4] = #10000 1'b0;
	data[4] = #30000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #5000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #10000 1'b1;
	data[4] = #15000 1'b0;
	data[4] = #5000 1'b1;
	data[4] = #10000 1'b0;
	data[4] = #5000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #5000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #10000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #5000 1'b1;
	data[4] = #25000 1'b0;
	data[4] = #10000 1'b1;
	data[4] = #10000 1'b0;
	data[4] = #5000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #20000 1'b1;
	data[4] = #20000 1'b0;
	data[4] = #10000 1'b1;
	data[4] = #5000 1'b0;
	data[4] = #5000 1'b1;
	data[4] = #5000 1'b0;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b1;
	data[3] = #5000 1'b0;
	data[3] = #5000 1'b1;
	data[3] = #10000 1'b0;
	data[3] = #5000 1'b1;
	data[3] = #10000 1'b0;
	data[3] = #15000 1'b1;
	data[3] = #10000 1'b0;
	data[3] = #5000 1'b1;
	data[3] = #5000 1'b0;
	data[3] = #5000 1'b1;
	data[3] = #25000 1'b0;
	data[3] = #5000 1'b1;
	data[3] = #5000 1'b0;
	data[3] = #15000 1'b1;
	data[3] = #5000 1'b0;
	data[3] = #35000 1'b1;
	data[3] = #5000 1'b0;
	data[3] = #10000 1'b1;
	data[3] = #10000 1'b0;
	data[3] = #15000 1'b1;
	data[3] = #15000 1'b0;
	data[3] = #5000 1'b1;
	data[3] = #5000 1'b0;
	data[3] = #5000 1'b1;
	data[3] = #10000 1'b0;
	data[3] = #10000 1'b1;
	data[3] = #5000 1'b0;
	data[3] = #5000 1'b1;
	data[3] = #5000 1'b0;
	data[3] = #20000 1'b1;
	data[3] = #15000 1'b0;
	data[3] = #5000 1'b1;
	data[3] = #10000 1'b0;
	data[3] = #5000 1'b1;
	data[3] = #10000 1'b0;
	data[3] = #10000 1'b1;
	data[3] = #5000 1'b0;
	data[3] = #10000 1'b1;
	data[3] = #10000 1'b0;
	data[3] = #5000 1'b1;
	data[3] = #5000 1'b0;
	data[3] = #15000 1'b1;
	data[3] = #5000 1'b0;
	data[3] = #40000 1'b1;
	data[3] = #10000 1'b0;
	data[3] = #5000 1'b1;
	data[3] = #10000 1'b0;
	data[3] = #15000 1'b1;
	data[3] = #5000 1'b0;
	data[3] = #10000 1'b1;
	data[3] = #15000 1'b0;
	data[3] = #5000 1'b1;
	data[3] = #5000 1'b0;
	data[3] = #5000 1'b1;
	data[3] = #10000 1'b0;
	data[3] = #5000 1'b1;
	data[3] = #20000 1'b0;
	data[3] = #20000 1'b1;
	data[3] = #5000 1'b0;
	data[3] = #20000 1'b1;
	data[3] = #5000 1'b0;
	data[3] = #10000 1'b1;
	data[3] = #5000 1'b0;
	data[3] = #20000 1'b1;
	data[3] = #15000 1'b0;
	data[3] = #15000 1'b1;
	data[3] = #5000 1'b0;
	data[3] = #10000 1'b1;
	data[3] = #5000 1'b0;
	data[3] = #5000 1'b1;
	data[3] = #5000 1'b0;
	data[3] = #10000 1'b1;
	data[3] = #5000 1'b0;
	data[3] = #10000 1'b1;
	data[3] = #5000 1'b0;
	data[3] = #5000 1'b1;
	data[3] = #5000 1'b0;
	data[3] = #5000 1'b1;
	data[3] = #10000 1'b0;
	data[3] = #5000 1'b1;
	data[3] = #5000 1'b0;
	data[3] = #10000 1'b1;
	data[3] = #10000 1'b0;
	data[3] = #5000 1'b1;
	data[3] = #10000 1'b0;
	data[3] = #5000 1'b1;
	data[3] = #5000 1'b0;
	data[3] = #5000 1'b1;
	data[3] = #5000 1'b0;
	data[3] = #5000 1'b1;
	data[3] = #15000 1'b0;
	data[3] = #20000 1'b1;
	data[3] = #10000 1'b0;
	data[3] = #20000 1'b1;
	data[3] = #5000 1'b0;
	data[3] = #15000 1'b1;
	data[3] = #15000 1'b0;
	data[3] = #5000 1'b1;
	data[3] = #10000 1'b0;
	data[3] = #5000 1'b1;
	data[3] = #10000 1'b0;
	data[3] = #25000 1'b1;
	data[3] = #10000 1'b0;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #10000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #10000 1'b0;
	data[2] = #10000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #10000 1'b0;
	data[2] = #10000 1'b1;
	data[2] = #15000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #15000 1'b0;
	data[2] = #10000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #10000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #10000 1'b1;
	data[2] = #20000 1'b0;
	data[2] = #15000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #10000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #15000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #15000 1'b0;
	data[2] = #15000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #10000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #20000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #15000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #35000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #15000 1'b0;
	data[2] = #10000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #10000 1'b1;
	data[2] = #25000 1'b0;
	data[2] = #10000 1'b1;
	data[2] = #10000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #10000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #15000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #10000 1'b0;
	data[2] = #10000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #10000 1'b1;
	data[2] = #20000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #20000 1'b1;
	data[2] = #10000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #10000 1'b0;
	data[2] = #15000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #15000 1'b1;
	data[2] = #20000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #10000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #20000 1'b1;
	data[2] = #10000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #15000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #5000 1'b0;
	data[2] = #15000 1'b1;
	data[2] = #15000 1'b0;
	data[2] = #10000 1'b1;
	data[2] = #10000 1'b0;
	data[2] = #5000 1'b1;
	data[2] = #10000 1'b0;
	data[2] = #10000 1'b1;
	data[2] = #25000 1'b0;
	data[2] = #10000 1'b1;
	data[2] = #10000 1'b0;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b0;
	data[1] = #10000 1'b1;
	data[1] = #10000 1'b0;
	data[1] = #5000 1'b1;
	data[1] = #5000 1'b0;
	data[1] = #15000 1'b1;
	data[1] = #10000 1'b0;
	data[1] = #10000 1'b1;
	data[1] = #20000 1'b0;
	data[1] = #10000 1'b1;
	data[1] = #5000 1'b0;
	data[1] = #15000 1'b1;
	data[1] = #15000 1'b0;
	data[1] = #10000 1'b1;
	data[1] = #10000 1'b0;
	data[1] = #5000 1'b1;
	data[1] = #5000 1'b0;
	data[1] = #5000 1'b1;
	data[1] = #10000 1'b0;
	data[1] = #5000 1'b1;
	data[1] = #10000 1'b0;
	data[1] = #5000 1'b1;
	data[1] = #5000 1'b0;
	data[1] = #10000 1'b1;
	data[1] = #5000 1'b0;
	data[1] = #10000 1'b1;
	data[1] = #30000 1'b0;
	data[1] = #5000 1'b1;
	data[1] = #20000 1'b0;
	data[1] = #5000 1'b1;
	data[1] = #10000 1'b0;
	data[1] = #20000 1'b1;
	data[1] = #25000 1'b0;
	data[1] = #15000 1'b1;
	data[1] = #5000 1'b0;
	data[1] = #20000 1'b1;
	data[1] = #5000 1'b0;
	data[1] = #15000 1'b1;
	data[1] = #5000 1'b0;
	data[1] = #5000 1'b1;
	data[1] = #5000 1'b0;
	data[1] = #5000 1'b1;
	data[1] = #10000 1'b0;
	data[1] = #20000 1'b1;
	data[1] = #5000 1'b0;
	data[1] = #5000 1'b1;
	data[1] = #20000 1'b0;
	data[1] = #5000 1'b1;
	data[1] = #5000 1'b0;
	data[1] = #15000 1'b1;
	data[1] = #10000 1'b0;
	data[1] = #15000 1'b1;
	data[1] = #15000 1'b0;
	data[1] = #5000 1'b1;
	data[1] = #15000 1'b0;
	data[1] = #5000 1'b1;
	data[1] = #5000 1'b0;
	data[1] = #40000 1'b1;
	data[1] = #5000 1'b0;
	data[1] = #5000 1'b1;
	data[1] = #5000 1'b0;
	data[1] = #10000 1'b1;
	data[1] = #5000 1'b0;
	data[1] = #20000 1'b1;
	data[1] = #15000 1'b0;
	data[1] = #15000 1'b1;
	data[1] = #15000 1'b0;
	data[1] = #10000 1'b1;
	data[1] = #10000 1'b0;
	data[1] = #10000 1'b1;
	data[1] = #5000 1'b0;
	data[1] = #10000 1'b1;
	data[1] = #5000 1'b0;
	data[1] = #5000 1'b1;
	data[1] = #10000 1'b0;
	data[1] = #20000 1'b1;
	data[1] = #5000 1'b0;
	data[1] = #15000 1'b1;
	data[1] = #5000 1'b0;
	data[1] = #15000 1'b1;
	data[1] = #5000 1'b0;
	data[1] = #5000 1'b1;
	data[1] = #20000 1'b0;
	data[1] = #15000 1'b1;
	data[1] = #15000 1'b0;
	data[1] = #15000 1'b1;
	data[1] = #5000 1'b0;
	data[1] = #10000 1'b1;
	data[1] = #20000 1'b0;
	data[1] = #5000 1'b1;
	data[1] = #35000 1'b0;
	data[1] = #5000 1'b1;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b1;
	data[0] = #20000 1'b0;
	data[0] = #5000 1'b1;
	data[0] = #10000 1'b0;
	data[0] = #5000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #5000 1'b1;
	data[0] = #20000 1'b0;
	data[0] = #10000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #5000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #5000 1'b1;
	data[0] = #15000 1'b0;
	data[0] = #25000 1'b1;
	data[0] = #10000 1'b0;
	data[0] = #5000 1'b1;
	data[0] = #10000 1'b0;
	data[0] = #15000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #5000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #5000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #20000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #5000 1'b1;
	data[0] = #15000 1'b0;
	data[0] = #20000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #10000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #5000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #15000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #5000 1'b1;
	data[0] = #15000 1'b0;
	data[0] = #10000 1'b1;
	data[0] = #35000 1'b0;
	data[0] = #25000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #10000 1'b1;
	data[0] = #10000 1'b0;
	data[0] = #5000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #10000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #15000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #10000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #5000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #15000 1'b1;
	data[0] = #10000 1'b0;
	data[0] = #5000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #25000 1'b1;
	data[0] = #20000 1'b0;
	data[0] = #10000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #10000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #5000 1'b1;
	data[0] = #35000 1'b0;
	data[0] = #5000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #10000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #15000 1'b1;
	data[0] = #10000 1'b0;
	data[0] = #5000 1'b1;
	data[0] = #15000 1'b0;
	data[0] = #15000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #5000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #10000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #5000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #5000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #5000 1'b1;
	data[0] = #15000 1'b0;
	data[0] = #10000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #5000 1'b1;
	data[0] = #10000 1'b0;
	data[0] = #10000 1'b1;
	data[0] = #25000 1'b0;
	data[0] = #15000 1'b1;
	data[0] = #10000 1'b0;
	data[0] = #10000 1'b1;
	data[0] = #20000 1'b0;
	data[0] = #5000 1'b1;
	data[0] = #10000 1'b0;
	data[0] = #10000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #10000 1'b1;
	data[0] = #5000 1'b0;
	data[0] = #5000 1'b1;
	data[0] = #10000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

measuring_vlg_sample_tst tb_sample (
	.clk(clk),
	.data(data),
	.hscan_switch(hscan_switch),
	.reset(reset),
	.sampler_tx(sampler)
);

measuring_vlg_check_tst tb_out(
	.freqout(freqout),
	.volout(volout),
	.sampler_rx(sampler)
);
endmodule

