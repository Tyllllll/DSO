// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/09/2019 22:30:46"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    trigger_sec
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module trigger_sec_vlg_sample_tst(
	clk,
	FIFO_data,
	reset,
	start,
	stop,
	sampler_tx
);
input  clk;
input [9:0] FIFO_data;
input  reset;
input  start;
input  stop;
output sampler_tx;

reg sample;
time current_time;
always @(clk or FIFO_data or reset or start or stop)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module trigger_sec_vlg_check_tst (
	countertest,
	midtest,
	pretest,
	RAM_data,
	retest,
	statetest,
	trigger_FIFOR,
	trigger_ready,
	sampler_rx
);
input [1:0] countertest;
input [9:0] midtest;
input [9:0] pretest;
input [9:0] RAM_data;
input [9:0] retest;
input [1:0] statetest;
input  trigger_FIFOR;
input  trigger_ready;
input sampler_rx;

reg [1:0] countertest_expected;
reg [9:0] midtest_expected;
reg [9:0] pretest_expected;
reg [9:0] RAM_data_expected;
reg [9:0] retest_expected;
reg [1:0] statetest_expected;
reg  trigger_FIFOR_expected;
reg  trigger_ready_expected;

reg [1:0] countertest_prev;
reg [9:0] midtest_prev;
reg [9:0] pretest_prev;
reg [9:0] RAM_data_prev;
reg [9:0] retest_prev;
reg [1:0] statetest_prev;
reg  trigger_FIFOR_prev;
reg  trigger_ready_prev;

reg [1:0] countertest_expected_prev;
reg [9:0] midtest_expected_prev;
reg [9:0] pretest_expected_prev;
reg [9:0] RAM_data_expected_prev;
reg [9:0] retest_expected_prev;
reg [1:0] statetest_expected_prev;
reg  trigger_FIFOR_expected_prev;
reg  trigger_ready_expected_prev;

reg [1:0] last_countertest_exp;
reg [9:0] last_midtest_exp;
reg [9:0] last_pretest_exp;
reg [9:0] last_RAM_data_exp;
reg [9:0] last_retest_exp;
reg [1:0] last_statetest_exp;
reg  last_trigger_FIFOR_exp;
reg  last_trigger_ready_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	countertest_prev = countertest;
	midtest_prev = midtest;
	pretest_prev = pretest;
	RAM_data_prev = RAM_data;
	retest_prev = retest;
	statetest_prev = statetest;
	trigger_FIFOR_prev = trigger_FIFOR;
	trigger_ready_prev = trigger_ready;
end

// update expected /o prevs

always @(trigger)
begin
	countertest_expected_prev = countertest_expected;
	midtest_expected_prev = midtest_expected;
	pretest_expected_prev = pretest_expected;
	RAM_data_expected_prev = RAM_data_expected;
	retest_expected_prev = retest_expected;
	statetest_expected_prev = statetest_expected;
	trigger_FIFOR_expected_prev = trigger_FIFOR_expected;
	trigger_ready_expected_prev = trigger_ready_expected;
end


// expected RAM_data[ 9 ]
initial
begin
	RAM_data_expected[9] = 1'bX;
end 
// expected RAM_data[ 8 ]
initial
begin
	RAM_data_expected[8] = 1'bX;
end 
// expected RAM_data[ 7 ]
initial
begin
	RAM_data_expected[7] = 1'bX;
end 
// expected RAM_data[ 6 ]
initial
begin
	RAM_data_expected[6] = 1'bX;
end 
// expected RAM_data[ 5 ]
initial
begin
	RAM_data_expected[5] = 1'bX;
end 
// expected RAM_data[ 4 ]
initial
begin
	RAM_data_expected[4] = 1'bX;
end 
// expected RAM_data[ 3 ]
initial
begin
	RAM_data_expected[3] = 1'bX;
end 
// expected RAM_data[ 2 ]
initial
begin
	RAM_data_expected[2] = 1'bX;
end 
// expected RAM_data[ 1 ]
initial
begin
	RAM_data_expected[1] = 1'bX;
end 
// expected RAM_data[ 0 ]
initial
begin
	RAM_data_expected[0] = 1'bX;
end 
// expected pretest[ 9 ]
initial
begin
	pretest_expected[9] = 1'bX;
end 
// expected pretest[ 8 ]
initial
begin
	pretest_expected[8] = 1'bX;
end 
// expected pretest[ 7 ]
initial
begin
	pretest_expected[7] = 1'bX;
end 
// expected pretest[ 6 ]
initial
begin
	pretest_expected[6] = 1'bX;
end 
// expected pretest[ 5 ]
initial
begin
	pretest_expected[5] = 1'bX;
end 
// expected pretest[ 4 ]
initial
begin
	pretest_expected[4] = 1'bX;
end 
// expected pretest[ 3 ]
initial
begin
	pretest_expected[3] = 1'bX;
end 
// expected pretest[ 2 ]
initial
begin
	pretest_expected[2] = 1'bX;
end 
// expected pretest[ 1 ]
initial
begin
	pretest_expected[1] = 1'bX;
end 
// expected pretest[ 0 ]
initial
begin
	pretest_expected[0] = 1'bX;
end 
// expected midtest[ 9 ]
initial
begin
	midtest_expected[9] = 1'bX;
end 
// expected midtest[ 8 ]
initial
begin
	midtest_expected[8] = 1'bX;
end 
// expected midtest[ 7 ]
initial
begin
	midtest_expected[7] = 1'bX;
end 
// expected midtest[ 6 ]
initial
begin
	midtest_expected[6] = 1'bX;
end 
// expected midtest[ 5 ]
initial
begin
	midtest_expected[5] = 1'bX;
end 
// expected midtest[ 4 ]
initial
begin
	midtest_expected[4] = 1'bX;
end 
// expected midtest[ 3 ]
initial
begin
	midtest_expected[3] = 1'bX;
end 
// expected midtest[ 2 ]
initial
begin
	midtest_expected[2] = 1'bX;
end 
// expected midtest[ 1 ]
initial
begin
	midtest_expected[1] = 1'bX;
end 
// expected midtest[ 0 ]
initial
begin
	midtest_expected[0] = 1'bX;
end 
// expected retest[ 9 ]
initial
begin
	retest_expected[9] = 1'bX;
end 
// expected retest[ 8 ]
initial
begin
	retest_expected[8] = 1'bX;
end 
// expected retest[ 7 ]
initial
begin
	retest_expected[7] = 1'bX;
end 
// expected retest[ 6 ]
initial
begin
	retest_expected[6] = 1'bX;
end 
// expected retest[ 5 ]
initial
begin
	retest_expected[5] = 1'bX;
end 
// expected retest[ 4 ]
initial
begin
	retest_expected[4] = 1'bX;
end 
// expected retest[ 3 ]
initial
begin
	retest_expected[3] = 1'bX;
end 
// expected retest[ 2 ]
initial
begin
	retest_expected[2] = 1'bX;
end 
// expected retest[ 1 ]
initial
begin
	retest_expected[1] = 1'bX;
end 
// expected retest[ 0 ]
initial
begin
	retest_expected[0] = 1'bX;
end 
// expected statetest[ 1 ]
initial
begin
	statetest_expected[1] = 1'bX;
end 
// expected statetest[ 0 ]
initial
begin
	statetest_expected[0] = 1'bX;
end 

// expected trigger_FIFOR
initial
begin
	trigger_FIFOR_expected = 1'bX;
end 

// expected trigger_ready
initial
begin
	trigger_ready_expected = 1'bX;
end 
// expected countertest[ 1 ]
initial
begin
	countertest_expected[1] = 1'bX;
end 
// expected countertest[ 0 ]
initial
begin
	countertest_expected[0] = 1'bX;
end 
// generate trigger
always @(countertest_expected or countertest or midtest_expected or midtest or pretest_expected or pretest or RAM_data_expected or RAM_data or retest_expected or retest or statetest_expected or statetest or trigger_FIFOR_expected or trigger_FIFOR or trigger_ready_expected or trigger_ready)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected countertest = %b | expected midtest = %b | expected pretest = %b | expected RAM_data = %b | expected retest = %b | expected statetest = %b | expected trigger_FIFOR = %b | expected trigger_ready = %b | ",countertest_expected_prev,midtest_expected_prev,pretest_expected_prev,RAM_data_expected_prev,retest_expected_prev,statetest_expected_prev,trigger_FIFOR_expected_prev,trigger_ready_expected_prev);
	$display("| real countertest = %b | real midtest = %b | real pretest = %b | real RAM_data = %b | real retest = %b | real statetest = %b | real trigger_FIFOR = %b | real trigger_ready = %b | ",countertest_prev,midtest_prev,pretest_prev,RAM_data_prev,retest_prev,statetest_prev,trigger_FIFOR_prev,trigger_ready_prev);
`endif
	if (
		( countertest_expected_prev[0] !== 1'bx ) && ( countertest_prev[0] !== countertest_expected_prev[0] )
		&& ((countertest_expected_prev[0] !== last_countertest_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countertest[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countertest_expected_prev);
		$display ("     Real value = %b", countertest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_countertest_exp[0] = countertest_expected_prev[0];
	end
	if (
		( countertest_expected_prev[1] !== 1'bx ) && ( countertest_prev[1] !== countertest_expected_prev[1] )
		&& ((countertest_expected_prev[1] !== last_countertest_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port countertest[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", countertest_expected_prev);
		$display ("     Real value = %b", countertest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_countertest_exp[1] = countertest_expected_prev[1];
	end
	if (
		( midtest_expected_prev[0] !== 1'bx ) && ( midtest_prev[0] !== midtest_expected_prev[0] )
		&& ((midtest_expected_prev[0] !== last_midtest_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port midtest[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", midtest_expected_prev);
		$display ("     Real value = %b", midtest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_midtest_exp[0] = midtest_expected_prev[0];
	end
	if (
		( midtest_expected_prev[1] !== 1'bx ) && ( midtest_prev[1] !== midtest_expected_prev[1] )
		&& ((midtest_expected_prev[1] !== last_midtest_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port midtest[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", midtest_expected_prev);
		$display ("     Real value = %b", midtest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_midtest_exp[1] = midtest_expected_prev[1];
	end
	if (
		( midtest_expected_prev[2] !== 1'bx ) && ( midtest_prev[2] !== midtest_expected_prev[2] )
		&& ((midtest_expected_prev[2] !== last_midtest_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port midtest[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", midtest_expected_prev);
		$display ("     Real value = %b", midtest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_midtest_exp[2] = midtest_expected_prev[2];
	end
	if (
		( midtest_expected_prev[3] !== 1'bx ) && ( midtest_prev[3] !== midtest_expected_prev[3] )
		&& ((midtest_expected_prev[3] !== last_midtest_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port midtest[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", midtest_expected_prev);
		$display ("     Real value = %b", midtest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_midtest_exp[3] = midtest_expected_prev[3];
	end
	if (
		( midtest_expected_prev[4] !== 1'bx ) && ( midtest_prev[4] !== midtest_expected_prev[4] )
		&& ((midtest_expected_prev[4] !== last_midtest_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port midtest[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", midtest_expected_prev);
		$display ("     Real value = %b", midtest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_midtest_exp[4] = midtest_expected_prev[4];
	end
	if (
		( midtest_expected_prev[5] !== 1'bx ) && ( midtest_prev[5] !== midtest_expected_prev[5] )
		&& ((midtest_expected_prev[5] !== last_midtest_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port midtest[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", midtest_expected_prev);
		$display ("     Real value = %b", midtest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_midtest_exp[5] = midtest_expected_prev[5];
	end
	if (
		( midtest_expected_prev[6] !== 1'bx ) && ( midtest_prev[6] !== midtest_expected_prev[6] )
		&& ((midtest_expected_prev[6] !== last_midtest_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port midtest[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", midtest_expected_prev);
		$display ("     Real value = %b", midtest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_midtest_exp[6] = midtest_expected_prev[6];
	end
	if (
		( midtest_expected_prev[7] !== 1'bx ) && ( midtest_prev[7] !== midtest_expected_prev[7] )
		&& ((midtest_expected_prev[7] !== last_midtest_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port midtest[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", midtest_expected_prev);
		$display ("     Real value = %b", midtest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_midtest_exp[7] = midtest_expected_prev[7];
	end
	if (
		( midtest_expected_prev[8] !== 1'bx ) && ( midtest_prev[8] !== midtest_expected_prev[8] )
		&& ((midtest_expected_prev[8] !== last_midtest_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port midtest[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", midtest_expected_prev);
		$display ("     Real value = %b", midtest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_midtest_exp[8] = midtest_expected_prev[8];
	end
	if (
		( midtest_expected_prev[9] !== 1'bx ) && ( midtest_prev[9] !== midtest_expected_prev[9] )
		&& ((midtest_expected_prev[9] !== last_midtest_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port midtest[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", midtest_expected_prev);
		$display ("     Real value = %b", midtest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_midtest_exp[9] = midtest_expected_prev[9];
	end
	if (
		( pretest_expected_prev[0] !== 1'bx ) && ( pretest_prev[0] !== pretest_expected_prev[0] )
		&& ((pretest_expected_prev[0] !== last_pretest_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pretest[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pretest_expected_prev);
		$display ("     Real value = %b", pretest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pretest_exp[0] = pretest_expected_prev[0];
	end
	if (
		( pretest_expected_prev[1] !== 1'bx ) && ( pretest_prev[1] !== pretest_expected_prev[1] )
		&& ((pretest_expected_prev[1] !== last_pretest_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pretest[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pretest_expected_prev);
		$display ("     Real value = %b", pretest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pretest_exp[1] = pretest_expected_prev[1];
	end
	if (
		( pretest_expected_prev[2] !== 1'bx ) && ( pretest_prev[2] !== pretest_expected_prev[2] )
		&& ((pretest_expected_prev[2] !== last_pretest_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pretest[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pretest_expected_prev);
		$display ("     Real value = %b", pretest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pretest_exp[2] = pretest_expected_prev[2];
	end
	if (
		( pretest_expected_prev[3] !== 1'bx ) && ( pretest_prev[3] !== pretest_expected_prev[3] )
		&& ((pretest_expected_prev[3] !== last_pretest_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pretest[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pretest_expected_prev);
		$display ("     Real value = %b", pretest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pretest_exp[3] = pretest_expected_prev[3];
	end
	if (
		( pretest_expected_prev[4] !== 1'bx ) && ( pretest_prev[4] !== pretest_expected_prev[4] )
		&& ((pretest_expected_prev[4] !== last_pretest_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pretest[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pretest_expected_prev);
		$display ("     Real value = %b", pretest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pretest_exp[4] = pretest_expected_prev[4];
	end
	if (
		( pretest_expected_prev[5] !== 1'bx ) && ( pretest_prev[5] !== pretest_expected_prev[5] )
		&& ((pretest_expected_prev[5] !== last_pretest_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pretest[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pretest_expected_prev);
		$display ("     Real value = %b", pretest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pretest_exp[5] = pretest_expected_prev[5];
	end
	if (
		( pretest_expected_prev[6] !== 1'bx ) && ( pretest_prev[6] !== pretest_expected_prev[6] )
		&& ((pretest_expected_prev[6] !== last_pretest_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pretest[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pretest_expected_prev);
		$display ("     Real value = %b", pretest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pretest_exp[6] = pretest_expected_prev[6];
	end
	if (
		( pretest_expected_prev[7] !== 1'bx ) && ( pretest_prev[7] !== pretest_expected_prev[7] )
		&& ((pretest_expected_prev[7] !== last_pretest_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pretest[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pretest_expected_prev);
		$display ("     Real value = %b", pretest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pretest_exp[7] = pretest_expected_prev[7];
	end
	if (
		( pretest_expected_prev[8] !== 1'bx ) && ( pretest_prev[8] !== pretest_expected_prev[8] )
		&& ((pretest_expected_prev[8] !== last_pretest_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pretest[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pretest_expected_prev);
		$display ("     Real value = %b", pretest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pretest_exp[8] = pretest_expected_prev[8];
	end
	if (
		( pretest_expected_prev[9] !== 1'bx ) && ( pretest_prev[9] !== pretest_expected_prev[9] )
		&& ((pretest_expected_prev[9] !== last_pretest_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pretest[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pretest_expected_prev);
		$display ("     Real value = %b", pretest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pretest_exp[9] = pretest_expected_prev[9];
	end
	if (
		( RAM_data_expected_prev[0] !== 1'bx ) && ( RAM_data_prev[0] !== RAM_data_expected_prev[0] )
		&& ((RAM_data_expected_prev[0] !== last_RAM_data_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_data_expected_prev);
		$display ("     Real value = %b", RAM_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RAM_data_exp[0] = RAM_data_expected_prev[0];
	end
	if (
		( RAM_data_expected_prev[1] !== 1'bx ) && ( RAM_data_prev[1] !== RAM_data_expected_prev[1] )
		&& ((RAM_data_expected_prev[1] !== last_RAM_data_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_data_expected_prev);
		$display ("     Real value = %b", RAM_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RAM_data_exp[1] = RAM_data_expected_prev[1];
	end
	if (
		( RAM_data_expected_prev[2] !== 1'bx ) && ( RAM_data_prev[2] !== RAM_data_expected_prev[2] )
		&& ((RAM_data_expected_prev[2] !== last_RAM_data_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_data_expected_prev);
		$display ("     Real value = %b", RAM_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RAM_data_exp[2] = RAM_data_expected_prev[2];
	end
	if (
		( RAM_data_expected_prev[3] !== 1'bx ) && ( RAM_data_prev[3] !== RAM_data_expected_prev[3] )
		&& ((RAM_data_expected_prev[3] !== last_RAM_data_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_data_expected_prev);
		$display ("     Real value = %b", RAM_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RAM_data_exp[3] = RAM_data_expected_prev[3];
	end
	if (
		( RAM_data_expected_prev[4] !== 1'bx ) && ( RAM_data_prev[4] !== RAM_data_expected_prev[4] )
		&& ((RAM_data_expected_prev[4] !== last_RAM_data_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_data_expected_prev);
		$display ("     Real value = %b", RAM_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RAM_data_exp[4] = RAM_data_expected_prev[4];
	end
	if (
		( RAM_data_expected_prev[5] !== 1'bx ) && ( RAM_data_prev[5] !== RAM_data_expected_prev[5] )
		&& ((RAM_data_expected_prev[5] !== last_RAM_data_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_data_expected_prev);
		$display ("     Real value = %b", RAM_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RAM_data_exp[5] = RAM_data_expected_prev[5];
	end
	if (
		( RAM_data_expected_prev[6] !== 1'bx ) && ( RAM_data_prev[6] !== RAM_data_expected_prev[6] )
		&& ((RAM_data_expected_prev[6] !== last_RAM_data_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_data_expected_prev);
		$display ("     Real value = %b", RAM_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RAM_data_exp[6] = RAM_data_expected_prev[6];
	end
	if (
		( RAM_data_expected_prev[7] !== 1'bx ) && ( RAM_data_prev[7] !== RAM_data_expected_prev[7] )
		&& ((RAM_data_expected_prev[7] !== last_RAM_data_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_data_expected_prev);
		$display ("     Real value = %b", RAM_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RAM_data_exp[7] = RAM_data_expected_prev[7];
	end
	if (
		( RAM_data_expected_prev[8] !== 1'bx ) && ( RAM_data_prev[8] !== RAM_data_expected_prev[8] )
		&& ((RAM_data_expected_prev[8] !== last_RAM_data_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_data[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_data_expected_prev);
		$display ("     Real value = %b", RAM_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RAM_data_exp[8] = RAM_data_expected_prev[8];
	end
	if (
		( RAM_data_expected_prev[9] !== 1'bx ) && ( RAM_data_prev[9] !== RAM_data_expected_prev[9] )
		&& ((RAM_data_expected_prev[9] !== last_RAM_data_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_data[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_data_expected_prev);
		$display ("     Real value = %b", RAM_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RAM_data_exp[9] = RAM_data_expected_prev[9];
	end
	if (
		( retest_expected_prev[0] !== 1'bx ) && ( retest_prev[0] !== retest_expected_prev[0] )
		&& ((retest_expected_prev[0] !== last_retest_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port retest[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", retest_expected_prev);
		$display ("     Real value = %b", retest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_retest_exp[0] = retest_expected_prev[0];
	end
	if (
		( retest_expected_prev[1] !== 1'bx ) && ( retest_prev[1] !== retest_expected_prev[1] )
		&& ((retest_expected_prev[1] !== last_retest_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port retest[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", retest_expected_prev);
		$display ("     Real value = %b", retest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_retest_exp[1] = retest_expected_prev[1];
	end
	if (
		( retest_expected_prev[2] !== 1'bx ) && ( retest_prev[2] !== retest_expected_prev[2] )
		&& ((retest_expected_prev[2] !== last_retest_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port retest[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", retest_expected_prev);
		$display ("     Real value = %b", retest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_retest_exp[2] = retest_expected_prev[2];
	end
	if (
		( retest_expected_prev[3] !== 1'bx ) && ( retest_prev[3] !== retest_expected_prev[3] )
		&& ((retest_expected_prev[3] !== last_retest_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port retest[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", retest_expected_prev);
		$display ("     Real value = %b", retest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_retest_exp[3] = retest_expected_prev[3];
	end
	if (
		( retest_expected_prev[4] !== 1'bx ) && ( retest_prev[4] !== retest_expected_prev[4] )
		&& ((retest_expected_prev[4] !== last_retest_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port retest[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", retest_expected_prev);
		$display ("     Real value = %b", retest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_retest_exp[4] = retest_expected_prev[4];
	end
	if (
		( retest_expected_prev[5] !== 1'bx ) && ( retest_prev[5] !== retest_expected_prev[5] )
		&& ((retest_expected_prev[5] !== last_retest_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port retest[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", retest_expected_prev);
		$display ("     Real value = %b", retest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_retest_exp[5] = retest_expected_prev[5];
	end
	if (
		( retest_expected_prev[6] !== 1'bx ) && ( retest_prev[6] !== retest_expected_prev[6] )
		&& ((retest_expected_prev[6] !== last_retest_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port retest[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", retest_expected_prev);
		$display ("     Real value = %b", retest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_retest_exp[6] = retest_expected_prev[6];
	end
	if (
		( retest_expected_prev[7] !== 1'bx ) && ( retest_prev[7] !== retest_expected_prev[7] )
		&& ((retest_expected_prev[7] !== last_retest_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port retest[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", retest_expected_prev);
		$display ("     Real value = %b", retest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_retest_exp[7] = retest_expected_prev[7];
	end
	if (
		( retest_expected_prev[8] !== 1'bx ) && ( retest_prev[8] !== retest_expected_prev[8] )
		&& ((retest_expected_prev[8] !== last_retest_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port retest[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", retest_expected_prev);
		$display ("     Real value = %b", retest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_retest_exp[8] = retest_expected_prev[8];
	end
	if (
		( retest_expected_prev[9] !== 1'bx ) && ( retest_prev[9] !== retest_expected_prev[9] )
		&& ((retest_expected_prev[9] !== last_retest_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port retest[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", retest_expected_prev);
		$display ("     Real value = %b", retest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_retest_exp[9] = retest_expected_prev[9];
	end
	if (
		( statetest_expected_prev[0] !== 1'bx ) && ( statetest_prev[0] !== statetest_expected_prev[0] )
		&& ((statetest_expected_prev[0] !== last_statetest_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port statetest[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", statetest_expected_prev);
		$display ("     Real value = %b", statetest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_statetest_exp[0] = statetest_expected_prev[0];
	end
	if (
		( statetest_expected_prev[1] !== 1'bx ) && ( statetest_prev[1] !== statetest_expected_prev[1] )
		&& ((statetest_expected_prev[1] !== last_statetest_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port statetest[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", statetest_expected_prev);
		$display ("     Real value = %b", statetest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_statetest_exp[1] = statetest_expected_prev[1];
	end
	if (
		( trigger_FIFOR_expected_prev !== 1'bx ) && ( trigger_FIFOR_prev !== trigger_FIFOR_expected_prev )
		&& ((trigger_FIFOR_expected_prev !== last_trigger_FIFOR_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port trigger_FIFOR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", trigger_FIFOR_expected_prev);
		$display ("     Real value = %b", trigger_FIFOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_trigger_FIFOR_exp = trigger_FIFOR_expected_prev;
	end
	if (
		( trigger_ready_expected_prev !== 1'bx ) && ( trigger_ready_prev !== trigger_ready_expected_prev )
		&& ((trigger_ready_expected_prev !== last_trigger_ready_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port trigger_ready :: @time = %t",  $realtime);
		$display ("     Expected value = %b", trigger_ready_expected_prev);
		$display ("     Real value = %b", trigger_ready_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_trigger_ready_exp = trigger_ready_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module trigger_sec_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [9:0] FIFO_data;
reg reset;
reg start;
reg stop;
// wires                                               
wire [1:0] countertest;
wire [9:0] midtest;
wire [9:0] pretest;
wire [9:0] RAM_data;
wire [9:0] retest;
wire [1:0] statetest;
wire trigger_FIFOR;
wire trigger_ready;

wire sampler;                             

// assign statements (if any)                          
trigger_sec i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.countertest(countertest),
	.FIFO_data(FIFO_data),
	.midtest(midtest),
	.pretest(pretest),
	.RAM_data(RAM_data),
	.reset(reset),
	.retest(retest),
	.start(start),
	.statetest(statetest),
	.stop(stop),
	.trigger_FIFOR(trigger_FIFOR),
	.trigger_ready(trigger_ready)
);

// clk
initial
begin
	repeat(66)
	begin
		clk = 1'b0;
		clk = #7500 1'b1;
		# 7500;
	end
	clk = 1'b0;
	clk = #7500 1'b1;
end 
// FIFO_data[ 9 ]
initial
begin
	FIFO_data[9] = 1'b1;
	FIFO_data[9] = #60000 1'b0;
	FIFO_data[9] = #15000 1'b1;
	FIFO_data[9] = #60000 1'b0;
	FIFO_data[9] = #15000 1'b1;
	FIFO_data[9] = #30000 1'b0;
	FIFO_data[9] = #15000 1'b1;
	FIFO_data[9] = #15000 1'b0;
	FIFO_data[9] = #15000 1'b1;
	FIFO_data[9] = #15000 1'b0;
	FIFO_data[9] = #30000 1'b1;
	FIFO_data[9] = #15000 1'b0;
	FIFO_data[9] = #15000 1'b1;
	FIFO_data[9] = #15000 1'b0;
	FIFO_data[9] = #30000 1'b1;
	FIFO_data[9] = #60000 1'b0;
	FIFO_data[9] = #30000 1'b1;
	FIFO_data[9] = #15000 1'b0;
	FIFO_data[9] = #15000 1'b1;
	FIFO_data[9] = #45000 1'b0;
	FIFO_data[9] = #30000 1'b1;
	FIFO_data[9] = #15000 1'b0;
	FIFO_data[9] = #30000 1'b1;
	FIFO_data[9] = #15000 1'b0;
	FIFO_data[9] = #15000 1'b1;
	FIFO_data[9] = #30000 1'b0;
	FIFO_data[9] = #30000 1'b1;
	FIFO_data[9] = #45000 1'b0;
	FIFO_data[9] = #60000 1'b1;
	FIFO_data[9] = #30000 1'b0;
	FIFO_data[9] = #15000 1'b1;
	FIFO_data[9] = #30000 1'b0;
	FIFO_data[9] = #15000 1'b1;
	FIFO_data[9] = #30000 1'b0;
	FIFO_data[9] = #15000 1'b1;
	FIFO_data[9] = #60000 1'b0;
	FIFO_data[9] = #15000 1'b1;
end 
// FIFO_data[ 8 ]
initial
begin
	FIFO_data[8] = 1'b1;
	FIFO_data[8] = #45000 1'b0;
	FIFO_data[8] = #30000 1'b1;
	FIFO_data[8] = #30000 1'b0;
	FIFO_data[8] = #15000 1'b1;
	FIFO_data[8] = #135000 1'b0;
	FIFO_data[8] = #45000 1'b1;
	FIFO_data[8] = #30000 1'b0;
	FIFO_data[8] = #15000 1'b1;
	FIFO_data[8] = #15000 1'b0;
	FIFO_data[8] = #15000 1'b1;
	FIFO_data[8] = #45000 1'b0;
	FIFO_data[8] = #15000 1'b1;
	FIFO_data[8] = #90000 1'b0;
	FIFO_data[8] = #30000 1'b1;
	FIFO_data[8] = #45000 1'b0;
	FIFO_data[8] = #15000 1'b1;
	FIFO_data[8] = #30000 1'b0;
	FIFO_data[8] = #15000 1'b1;
	FIFO_data[8] = #15000 1'b0;
	FIFO_data[8] = #45000 1'b1;
	FIFO_data[8] = #45000 1'b0;
	FIFO_data[8] = #15000 1'b1;
	FIFO_data[8] = #30000 1'b0;
	FIFO_data[8] = #45000 1'b1;
	FIFO_data[8] = #15000 1'b0;
	FIFO_data[8] = #15000 1'b1;
	FIFO_data[8] = #15000 1'b0;
	FIFO_data[8] = #15000 1'b1;
	FIFO_data[8] = #30000 1'b0;
	FIFO_data[8] = #30000 1'b1;
	FIFO_data[8] = #15000 1'b0;
end 
// FIFO_data[ 7 ]
initial
begin
	FIFO_data[7] = 1'b0;
	FIFO_data[7] = #45000 1'b1;
	FIFO_data[7] = #45000 1'b0;
	FIFO_data[7] = #30000 1'b1;
	FIFO_data[7] = #15000 1'b0;
	FIFO_data[7] = #15000 1'b1;
	FIFO_data[7] = #60000 1'b0;
	FIFO_data[7] = #15000 1'b1;
	FIFO_data[7] = #30000 1'b0;
	FIFO_data[7] = #15000 1'b1;
	FIFO_data[7] = #60000 1'b0;
	FIFO_data[7] = #15000 1'b1;
	FIFO_data[7] = #15000 1'b0;
	FIFO_data[7] = #15000 1'b1;
	FIFO_data[7] = #45000 1'b0;
	FIFO_data[7] = #15000 1'b1;
	FIFO_data[7] = #60000 1'b0;
	FIFO_data[7] = #75000 1'b1;
	FIFO_data[7] = #15000 1'b0;
	FIFO_data[7] = #15000 1'b1;
	FIFO_data[7] = #30000 1'b0;
	FIFO_data[7] = #30000 1'b1;
	FIFO_data[7] = #30000 1'b0;
	FIFO_data[7] = #15000 1'b1;
	FIFO_data[7] = #60000 1'b0;
	FIFO_data[7] = #15000 1'b1;
	FIFO_data[7] = #15000 1'b0;
	FIFO_data[7] = #15000 1'b1;
	FIFO_data[7] = #30000 1'b0;
	FIFO_data[7] = #15000 1'b1;
	FIFO_data[7] = #45000 1'b0;
	FIFO_data[7] = #30000 1'b1;
	FIFO_data[7] = #30000 1'b0;
	FIFO_data[7] = #15000 1'b1;
end 
// FIFO_data[ 6 ]
initial
begin
	FIFO_data[6] = 1'b1;
	FIFO_data[6] = #15000 1'b0;
	FIFO_data[6] = #15000 1'b1;
	FIFO_data[6] = #15000 1'b0;
	FIFO_data[6] = #30000 1'b1;
	FIFO_data[6] = #15000 1'b0;
	FIFO_data[6] = #45000 1'b1;
	FIFO_data[6] = #75000 1'b0;
	FIFO_data[6] = #15000 1'b1;
	FIFO_data[6] = #30000 1'b0;
	FIFO_data[6] = #15000 1'b1;
	FIFO_data[6] = #45000 1'b0;
	FIFO_data[6] = #15000 1'b1;
	FIFO_data[6] = #15000 1'b0;
	FIFO_data[6] = #30000 1'b1;
	FIFO_data[6] = #30000 1'b0;
	FIFO_data[6] = #15000 1'b1;
	FIFO_data[6] = #15000 1'b0;
	FIFO_data[6] = #15000 1'b1;
	FIFO_data[6] = #15000 1'b0;
	FIFO_data[6] = #15000 1'b1;
	FIFO_data[6] = #15000 1'b0;
	FIFO_data[6] = #15000 1'b1;
	FIFO_data[6] = #15000 1'b0;
	FIFO_data[6] = #15000 1'b1;
	FIFO_data[6] = #30000 1'b0;
	FIFO_data[6] = #15000 1'b1;
	FIFO_data[6] = #15000 1'b0;
	FIFO_data[6] = #15000 1'b1;
	FIFO_data[6] = #45000 1'b0;
	FIFO_data[6] = #45000 1'b1;
	FIFO_data[6] = #30000 1'b0;
	FIFO_data[6] = #15000 1'b1;
	FIFO_data[6] = #15000 1'b0;
	FIFO_data[6] = #15000 1'b1;
	FIFO_data[6] = #75000 1'b0;
	FIFO_data[6] = #30000 1'b1;
	FIFO_data[6] = #15000 1'b0;
	FIFO_data[6] = #15000 1'b1;
	FIFO_data[6] = #30000 1'b0;
	FIFO_data[6] = #15000 1'b1;
	FIFO_data[6] = #30000 1'b0;
end 
// FIFO_data[ 5 ]
initial
begin
	FIFO_data[5] = 1'b1;
	FIFO_data[5] = #15000 1'b0;
	FIFO_data[5] = #30000 1'b1;
	FIFO_data[5] = #30000 1'b0;
	FIFO_data[5] = #30000 1'b1;
	FIFO_data[5] = #30000 1'b0;
	FIFO_data[5] = #30000 1'b1;
	FIFO_data[5] = #30000 1'b0;
	FIFO_data[5] = #75000 1'b1;
	FIFO_data[5] = #60000 1'b0;
	FIFO_data[5] = #15000 1'b1;
	FIFO_data[5] = #15000 1'b0;
	FIFO_data[5] = #30000 1'b1;
	FIFO_data[5] = #45000 1'b0;
	FIFO_data[5] = #15000 1'b1;
	FIFO_data[5] = #45000 1'b0;
	FIFO_data[5] = #15000 1'b1;
	FIFO_data[5] = #75000 1'b0;
	FIFO_data[5] = #15000 1'b1;
	FIFO_data[5] = #30000 1'b0;
	FIFO_data[5] = #15000 1'b1;
	FIFO_data[5] = #15000 1'b0;
	FIFO_data[5] = #15000 1'b1;
	FIFO_data[5] = #45000 1'b0;
	FIFO_data[5] = #30000 1'b1;
	FIFO_data[5] = #30000 1'b0;
	FIFO_data[5] = #15000 1'b1;
	FIFO_data[5] = #60000 1'b0;
	FIFO_data[5] = #30000 1'b1;
	FIFO_data[5] = #90000 1'b0;
end 
// FIFO_data[ 4 ]
initial
begin
	FIFO_data[4] = 1'b0;
	FIFO_data[4] = #30000 1'b1;
	FIFO_data[4] = #15000 1'b0;
	FIFO_data[4] = #30000 1'b1;
	FIFO_data[4] = #45000 1'b0;
	FIFO_data[4] = #15000 1'b1;
	FIFO_data[4] = #15000 1'b0;
	FIFO_data[4] = #15000 1'b1;
	FIFO_data[4] = #30000 1'b0;
	FIFO_data[4] = #15000 1'b1;
	FIFO_data[4] = #45000 1'b0;
	FIFO_data[4] = #30000 1'b1;
	FIFO_data[4] = #15000 1'b0;
	FIFO_data[4] = #60000 1'b1;
	FIFO_data[4] = #15000 1'b0;
	FIFO_data[4] = #60000 1'b1;
	FIFO_data[4] = #45000 1'b0;
	FIFO_data[4] = #105000 1'b1;
	FIFO_data[4] = #15000 1'b0;
	FIFO_data[4] = #15000 1'b1;
	FIFO_data[4] = #15000 1'b0;
	FIFO_data[4] = #15000 1'b1;
	FIFO_data[4] = #15000 1'b0;
	FIFO_data[4] = #45000 1'b1;
	FIFO_data[4] = #30000 1'b0;
	FIFO_data[4] = #15000 1'b1;
	FIFO_data[4] = #45000 1'b0;
	FIFO_data[4] = #30000 1'b1;
	FIFO_data[4] = #45000 1'b0;
	FIFO_data[4] = #60000 1'b1;
end 
// FIFO_data[ 3 ]
initial
begin
	FIFO_data[3] = 1'b1;
	FIFO_data[3] = #15000 1'b0;
	FIFO_data[3] = #30000 1'b1;
	FIFO_data[3] = #45000 1'b0;
	FIFO_data[3] = #60000 1'b1;
	FIFO_data[3] = #15000 1'b0;
	FIFO_data[3] = #30000 1'b1;
	FIFO_data[3] = #45000 1'b0;
	FIFO_data[3] = #15000 1'b1;
	FIFO_data[3] = #15000 1'b0;
	FIFO_data[3] = #15000 1'b1;
	FIFO_data[3] = #15000 1'b0;
	FIFO_data[3] = #30000 1'b1;
	FIFO_data[3] = #30000 1'b0;
	FIFO_data[3] = #45000 1'b1;
	FIFO_data[3] = #30000 1'b0;
	FIFO_data[3] = #15000 1'b1;
	FIFO_data[3] = #30000 1'b0;
	FIFO_data[3] = #15000 1'b1;
	FIFO_data[3] = #30000 1'b0;
	FIFO_data[3] = #45000 1'b1;
	FIFO_data[3] = #15000 1'b0;
	FIFO_data[3] = #45000 1'b1;
	FIFO_data[3] = #30000 1'b0;
	FIFO_data[3] = #150000 1'b1;
	FIFO_data[3] = #75000 1'b0;
	FIFO_data[3] = #15000 1'b1;
	FIFO_data[3] = #30000 1'b0;
	FIFO_data[3] = #15000 1'b1;
	FIFO_data[3] = #15000 1'b0;
	FIFO_data[3] = #15000 1'b1;
	FIFO_data[3] = #15000 1'b0;
end 
// FIFO_data[ 2 ]
initial
begin
	FIFO_data[2] = 1'b0;
	FIFO_data[2] = #30000 1'b1;
	FIFO_data[2] = #15000 1'b0;
	FIFO_data[2] = #15000 1'b1;
	FIFO_data[2] = #15000 1'b0;
	FIFO_data[2] = #60000 1'b1;
	FIFO_data[2] = #15000 1'b0;
	FIFO_data[2] = #30000 1'b1;
	FIFO_data[2] = #15000 1'b0;
	FIFO_data[2] = #45000 1'b1;
	FIFO_data[2] = #15000 1'b0;
	FIFO_data[2] = #15000 1'b1;
	FIFO_data[2] = #15000 1'b0;
	FIFO_data[2] = #15000 1'b1;
	FIFO_data[2] = #45000 1'b0;
	FIFO_data[2] = #15000 1'b1;
	FIFO_data[2] = #15000 1'b0;
	FIFO_data[2] = #15000 1'b1;
	FIFO_data[2] = #30000 1'b0;
	FIFO_data[2] = #15000 1'b1;
	FIFO_data[2] = #15000 1'b0;
	FIFO_data[2] = #15000 1'b1;
	FIFO_data[2] = #15000 1'b0;
	FIFO_data[2] = #30000 1'b1;
	FIFO_data[2] = #45000 1'b0;
	FIFO_data[2] = #15000 1'b1;
	FIFO_data[2] = #75000 1'b0;
	FIFO_data[2] = #30000 1'b1;
	FIFO_data[2] = #30000 1'b0;
	FIFO_data[2] = #60000 1'b1;
	FIFO_data[2] = #15000 1'b0;
	FIFO_data[2] = #15000 1'b1;
	FIFO_data[2] = #105000 1'b0;
	FIFO_data[2] = #30000 1'b1;
	FIFO_data[2] = #30000 1'b0;
	FIFO_data[2] = #30000 1'b1;
end 
// FIFO_data[ 1 ]
initial
begin
	FIFO_data[1] = 1'b1;
	FIFO_data[1] = #60000 1'b0;
	FIFO_data[1] = #15000 1'b1;
	FIFO_data[1] = #120000 1'b0;
	FIFO_data[1] = #15000 1'b1;
	FIFO_data[1] = #45000 1'b0;
	FIFO_data[1] = #15000 1'b1;
	FIFO_data[1] = #30000 1'b0;
	FIFO_data[1] = #15000 1'b1;
	FIFO_data[1] = #15000 1'b0;
	FIFO_data[1] = #15000 1'b1;
	FIFO_data[1] = #15000 1'b0;
	FIFO_data[1] = #15000 1'b1;
	FIFO_data[1] = #15000 1'b0;
	FIFO_data[1] = #15000 1'b1;
	FIFO_data[1] = #15000 1'b0;
	FIFO_data[1] = #30000 1'b1;
	FIFO_data[1] = #30000 1'b0;
	FIFO_data[1] = #15000 1'b1;
	FIFO_data[1] = #15000 1'b0;
	FIFO_data[1] = #15000 1'b1;
	FIFO_data[1] = #15000 1'b0;
	FIFO_data[1] = #75000 1'b1;
	FIFO_data[1] = #90000 1'b0;
	FIFO_data[1] = #15000 1'b1;
	FIFO_data[1] = #30000 1'b0;
	FIFO_data[1] = #15000 1'b1;
	FIFO_data[1] = #15000 1'b0;
	FIFO_data[1] = #45000 1'b1;
	FIFO_data[1] = #15000 1'b0;
	FIFO_data[1] = #30000 1'b1;
	FIFO_data[1] = #15000 1'b0;
	FIFO_data[1] = #60000 1'b1;
	FIFO_data[1] = #15000 1'b0;
	FIFO_data[1] = #30000 1'b1;
end 
// FIFO_data[ 0 ]
initial
begin
	FIFO_data[0] = 1'b1;
	FIFO_data[0] = #60000 1'b0;
	FIFO_data[0] = #30000 1'b1;
	FIFO_data[0] = #15000 1'b0;
	FIFO_data[0] = #15000 1'b1;
	FIFO_data[0] = #15000 1'b0;
	FIFO_data[0] = #30000 1'b1;
	FIFO_data[0] = #30000 1'b0;
	FIFO_data[0] = #30000 1'b1;
	FIFO_data[0] = #45000 1'b0;
	FIFO_data[0] = #30000 1'b1;
	FIFO_data[0] = #45000 1'b0;
	FIFO_data[0] = #15000 1'b1;
	FIFO_data[0] = #15000 1'b0;
	FIFO_data[0] = #30000 1'b1;
	FIFO_data[0] = #15000 1'b0;
	FIFO_data[0] = #15000 1'b1;
	FIFO_data[0] = #90000 1'b0;
	FIFO_data[0] = #15000 1'b1;
	FIFO_data[0] = #45000 1'b0;
	FIFO_data[0] = #30000 1'b1;
	FIFO_data[0] = #30000 1'b0;
	FIFO_data[0] = #15000 1'b1;
	FIFO_data[0] = #15000 1'b0;
	FIFO_data[0] = #15000 1'b1;
	FIFO_data[0] = #15000 1'b0;
	FIFO_data[0] = #15000 1'b1;
	FIFO_data[0] = #30000 1'b0;
	FIFO_data[0] = #30000 1'b1;
	FIFO_data[0] = #15000 1'b0;
	FIFO_data[0] = #15000 1'b1;
	FIFO_data[0] = #30000 1'b0;
	FIFO_data[0] = #30000 1'b1;
	FIFO_data[0] = #45000 1'b0;
	FIFO_data[0] = #15000 1'b1;
	FIFO_data[0] = #30000 1'b0;
	FIFO_data[0] = #15000 1'b1;
end 

// start
initial
begin
	start = 1'b0;
	start = #10000 1'b1;
	start = #20000 1'b0;
	start = #350000 1'b1;
	start = #20000 1'b0;
end 

// stop
initial
begin
	stop = 1'b0;
	stop = #210000 1'b1;
	stop = #10000 1'b0;
	stop = #340000 1'b1;
	stop = #20000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

trigger_sec_vlg_sample_tst tb_sample (
	.clk(clk),
	.FIFO_data(FIFO_data),
	.reset(reset),
	.start(start),
	.stop(stop),
	.sampler_tx(sampler)
);

trigger_sec_vlg_check_tst tb_out(
	.countertest(countertest),
	.midtest(midtest),
	.pretest(pretest),
	.RAM_data(RAM_data),
	.retest(retest),
	.statetest(statetest),
	.trigger_FIFOR(trigger_FIFOR),
	.trigger_ready(trigger_ready),
	.sampler_rx(sampler)
);
endmodule

