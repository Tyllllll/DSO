------------------------------------------------------------------------
--
--        Copyright (C) 2018
--        All rights reserved
--
--        filename: AD_ctr
--
--        created by Tyl at 2019-01-07 17:14:48
--        modified by Tyl at 2019-01-07 18:33:45
--
------------------------------------------------------------------------
-- Quartus II VHDL Template
-- Four-State Moore State Machine

-- A Moore machine's outputs are dependent only on the current state.
-- The output is written only when the state changes.  (State
-- transitions are synchronous.)
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity AD_ctr is
	port(
		clk, reset: in std_logic;
		ADC_DOUT: in std_logic;
		ADC_CONVS: out std_logic;
		ADC_DIN: out std_logic;
		ADC_SCLK: out std_logic;
		q: out std_logic_vector(0 to 11)
	);
end AD_ctr;

architecture bhv of AD_ctr is

	-- Build an enumerated type for the state machine
	type state_type is (s0, s1, s2, s3, s4, s5);

	-- Register to hold the current state
	signal state   : state_type;
	
	signal isInit: std_logic := '0';
	signal counter: std_logic_vector(6 downto 0);
	constant InitData: std_logic_vector(0 to 5) := "100010";
	signal data: std_logic_vector(0 to 11);
	
begin	
	-- Logic to advance to the next state
	process (clk, reset)
	begin
		if reset = '1' then
			state <= s0;
		elsif (rising_edge(clk)) then
			case state is
				when s0=>
					state <= s1;
				when s1=>
					--延迟64个时钟周期
					if counter = X"3F" then
						if isInit = '0' then
							state <= s2;
						else
							state <= s4;
						end if;
					end if;
				when s2=>
					--进行6个时钟周期的初始化，计数到十进制69
					if counter = X"45" then
						state <= s3;
					end if;
				when s3 =>
					--延迟10个时钟周期，到十进制79
					if counter = X"4F" then
						state <= s0;
						isInit <= '1';
					end if;
				when s4 =>
					--进行12个时钟周期采样，计数到十进制75
					if counter = X"4B" then
						state <= s5;
					end if;
				when s5 =>
					--延迟4个时钟周期，到十进制79
					if counter = X"4F" then
						state <= s0;
					end if;
			end case;
		end if;
	end process;

	-- Output depends solely on the current state
	process (state)
	begin
		case state is
			when s0 =>
				ADC_CONVS <= '1';
			when s1 =>
				ADC_CONVS <= '0';
				ADC_SCLK <= '0';
			when s2 =>
				ADC_DIN <= InitData(conv_integer(counter - 64));
				ADC_SCLK <= clk;
			when s3 =>
				ADC_CONVS <= '0';
				ADC_SCLK <= '0';
			when s4 =>
				ADC_CONVS <= '0';
				--下降沿读数
				if clk' event and clk = '0' then
					--只读十二位
					if(conv_integer(counter - 63) < 12) then
						data(conv_integer(counter - 64)) <= ADC_DOUT;
					end if;
				end if;
				ADC_SCLK <= clk;
			when s5 =>
				ADC_SCLK <= '0';
				q <= data;
		end case;
	end process;

	--计数模块
	process(clk, reset)
	begin
		if reset = '1' then
			counter <= (others => '0');
		elsif clk' event and clk = '1' then
			counter <= counter + 1;
		end if;
		--计数到十进制80清零
		if counter = X"50" then
			counter <= (others => '0');
		end if;
	end process;
	
end bhv;
